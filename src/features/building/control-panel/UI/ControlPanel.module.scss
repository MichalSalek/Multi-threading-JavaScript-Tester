@use '../../../../global-styles/variables';


//
//
// VARS, MIXINS AND PLACEHOLDERS
//

$control-panel-height: 280px;

$control-panel-background-color: #0264b2;
$control-panel-background-color-transparently: rgba(16, 16, 20, 0.98);

$side-button-width: 30px;

$control-switch-label-min-width: 230px;


%accentBackgroundColor {
  background-color: $control-panel-background-color;
}

%darkBackgroundColorTransparently {
  background-color: $control-panel-background-color-transparently;
}

@mixin hoverEffectControlChange($color: rgba(113, 113, 240, 0.9)) {
  filter: drop-shadow(0 5px 2px $color);
}

%dropShadowLightColor {
  filter: drop-shadow(0 5px 3px #FFFFFF22);
}

@mixin svgSize($width: 32px) {
  height: auto;
  width: $width;
}


%animateOnTurnOn {
  @keyframes animate-on-turn-on-keyframe {
    0% {
      filter: brightness(7) drop-shadow(-3px 2px 2px rgba(113, 113, 255, 1)) sepia(1);
    }

    30% {
      filter: brightness(6) drop-shadow(-3px 2px 2px rgba(113, 113, 255, 0.4));
    }

    80% {
      filter: brightness(1.5) drop-shadow(-3px 2px 2px rgba(113, 113, 255, 0.3));
    }

    100% {
      filter: brightness(1) drop-shadow(-3px 2px 2px rgba(113, 113, 255, 0.8));
    }
  }

  animation: animate-on-turn-on-keyframe 0.6s ease-in 0s forwards;
}


// Duo-tone color states
//
%colorVariablesAttributesDisabled {
  --fa-primary-color: #dfdfdf;
  --fa-secondary-color: #6c7793;
}

%colorVariablesAttributesEnabled {
  --fa-primary-color: #f8f8f8;
  --fa-secondary-color: #059fffe6;
}

@mixin svgShortAnimation($animation-time: 0.15s) {

  $svg-animation-scale: 1.04;


  @keyframes animate-on-hover-keyframe {
    0%, 80%, 100% {
      transform: scale(1);
    }

    50% {
      transform: scale($svg-animation-scale);
    }
  }

  svg {
    > g > path {
      &:first-child {
        animation: animate-on-hover-keyframe $animation-time cubic-bezier(1, 0, 0, 1) 0s both;
      }

      &:last-of-type {
        animation: animate-on-hover-keyframe $animation-time cubic-bezier(1, 0, 0, 1) 0.1s both;
      }
    }
  }
}

//
//
// STYLING
//
.host {
  z-index: 1900;
  position: relative;
  left: 0;

  .innerHost {
    position: fixed;
    width: fit-content;
    pointer-events: none;
    left: 0;
  }

  .hostSection {
    display: flex;
    color: #d3dedc;
    height: $control-panel-height;
    width: fit-content;
    pointer-events: none;
  }
}


// Flipped version of Control Panel
//
.hostFlipped {
  position: fixed;
  bottom: $control-panel-height;


  > .innerHost {
    left: 50%;
    bottom: 0;
    transform: translate(-50%, 35px) rotate(-90deg) !important;

    > .hostSection {
      transform: translateX(-32px);
    }
  }

  .collapsedControlsList {
    transform: translateX(-58px);
  }

  .listItem {
    transform: rotate(90deg);

    span {
      display: none;
    }
  }

  .placementControlsContainer {
    svg {
      transform: rotate(90deg);
    }
  }
}


.placementControlsContainer {
  @extend %darkBackgroundColorTransparently;

  display: flex;
  flex-direction: column;
  justify-content: space-around;

  > nav {
    @extend %colorVariablesAttributesDisabled;

    display: flex;
    justify-content: center;
    align-items: center;

    height: 38px;
    width: 40px;

    position: relative;
    z-index: 2001;

    flex-grow: 1;


    &:hover {
      @extend %colorVariablesAttributesEnabled;
      @include svgShortAnimation(0.2s);
    }

    svg {
      transition: transform 0.05s linear;
    }
  }
}


.moveHandlerIsEnabled {
  @extend %colorVariablesAttributesEnabled;

  svg {
    transform: scale(1.5);
  }
}


.collapseHandler {
  background-color: black;

  display: flex;
  justify-content: flex-end;
  align-items: center;

  padding: 0 4px;
  width: $side-button-width;

  transform: translateX(-12px);

  position: relative;
  z-index: 2002;

  border: variables.$masterBorderStylePrimary;
  border-width: 2px 0 2px 0;

  pointer-events: all;

  &:hover {
    @extend %accentBackgroundColor;

    svg {
      color: white;
    }
  }

  > section {
    display: flex;
    flex-direction: column;
    height: 100%;
    justify-content: space-evenly;
  }

  svg {
    @include svgSize(12px)
  }

  .turned180Deg {
    transform: rotate(180deg);
  }
}


.controlsListContainer {
  @extend %darkBackgroundColorTransparently;

  display: flex;

  padding: 2px;
  transition: transform 0.5s cubic-bezier(0.37, 0.98, 0.63, 0.88), opacity 0.5s cubic-bezier(0.37, 0.98, 0.63, 0.88);

  position: relative;
  z-index: 2000;

  border: variables.$masterBorderStylePrimary;
  border-width: 2px 2px 2px 0;
  border-radius: 0 5px 5px 0;

  pointer-events: all;

  .disabledControl {
    @extend %colorVariablesAttributesDisabled;
  }

  .enabledControl {
    @extend %colorVariablesAttributesEnabled;

    button > span {
      opacity: 0.9;
    }

    svg {
      @extend %dropShadowLightColor;
      @extend %animateOnTurnOn;
    }
  }

  .controlsList {
    display: flex;
    flex-direction: column;
  }

  .listItem {
    margin: 5px 0;
    display: flex;
    flex: 1;

    > button {
      width: 100%;
      padding: 15px 7px;


      display: flex;
      justify-content: flex-end;
      align-items: center;

      > svg {
        @include svgSize(48px);
        padding: 0 3px;
      }
    }

    span {
      letter-spacing: 1px;
      font-weight: 800;
      font-size: 0.9rem;

      color: white;
      opacity: 0.7;

      min-width: $control-switch-label-min-width;
      width: 100%;

      padding: 0 1rem;

      &::selection {
        background: transparent;
      }
    }

    &:hover {
      span {
        opacity: 1;
        filter: drop-shadow(0 0 3px black);
      }

      @include svgShortAnimation();
    }
  }
}

.expandedControlsList {
  transform: translateX(-15px);
  opacity: 1;
}

.collapsedControlsList {
  transform: translateX(calc(0px - #{$control-switch-label-min-width} - 55px));
  opacity: 0.9;
}



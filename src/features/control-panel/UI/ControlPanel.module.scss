@use '../../../global-styles/variables';


//
//
// VARS, MIXINS AND PLACEHOLDERS
//

$control-panel-height: 180px;

$control-panel-background-color: #0264b2;
$control-panel-background-color-transparently: rgba(25, 28, 25, 0.98);

$side-button-width: 16px;


%accentBackgroundColor {
  background-color: $control-panel-background-color;
}

%darkBackgroundColorTransparently {
  background-color: $control-panel-background-color-transparently;
}

@mixin hoverEffectControlChange($color: rgba(113, 113, 240, 0.9)) {
  filter: drop-shadow(0 5px 2px $color);
}

%dropShadowLightColor {
  filter: drop-shadow(0 5px 3px #FFFFFF22);
}

@mixin svgSize($width: 32px) {
  height: auto;
  width: $width;
}


%animateOnTurnOn {
  animation: animate-on-turn-on-keyframe 0.6s ease-in 0s forwards;
}


// Duo-tone color states
//
%colorVariablesAttributesDisabled {
  --fa-primary-color: #4b4c4d;
  --fa-secondary-color: #60729f;
}

%colorVariablesAttributesEnabled {
  --fa-primary-color: #ccd9e5;
  --fa-secondary-color: #3d92c7d6;
}

%activeEffect {
  @extend %colorVariablesAttributesEnabled;
}

//
//
// STYLING
//
.host {
  z-index: 1900;
  position: relative;
  left: 0;
}

.innerHost {
  position: fixed;
  width: fit-content;
  left: 0;
}

.hostSection {
  display: flex;
  color: #d3dedc;
  height: $control-panel-height;
  width: fit-content;
}

// Flipped version of Control Panel
//
.hostFlipped {
  position: fixed;
  bottom: $control-panel-height;


  > .innerHost {
    left: 50%;
    bottom: 0;
    transform: translate(-50%, 25px) rotate(-90deg) !important;
  }

  .collapsedControlsList {
    transform: translateX(-48px);
  }

  .listItem {
    transform: rotate(90deg);

    span {
      display: none;
    }
  }
}


.placementControlsContainer {
  @extend %darkBackgroundColorTransparently;

  display: flex;
  flex-direction: column;
  justify-content: space-around;
}

.moveHandler {
  @extend %colorVariablesAttributesDisabled;

  display: flex;
  justify-content: center;
  align-items: center;

  height: 38px;
  width: 46px;

  position: relative;
  z-index: 2001;

  flex-grow: 1;

  svg {
    transition: transform 0.05s linear;
    transform: scale(1);
  }

  &:hover {
    @extend %activeEffect;
  }
}

.moveHandlerIsEnabled {
  @extend %activeEffect;

  svg {
    transform: scale(1.5);
  }
}

.changePositionHandler {
  @extend %colorVariablesAttributesDisabled;

  display: flex;
  justify-content: center;
  align-items: center;

  height: 38px;
  width: 46px;

  position: relative;
  z-index: 2001;

  flex-grow: 1;

  svg {
    transition: transform 0.08s ease;
    transform: scale(1);
  }

  &:hover {
    @extend %activeEffect;
  }
}


.collapseHandler {
  @extend %accentBackgroundColor;

  display: flex;
  justify-content: center;
  align-items: center;

  padding: 0 4px;
  width: $side-button-width;

  position: relative;
  z-index: 2002;

  border: variables.$masterBorderStyle;
  border-width: 1px 0 1px 0;

  &:hover {

    svg {
      color: white;
    }
  }

  > section {
    display: flex;
    flex-direction: column;
    height: 100%;
    justify-content: space-evenly;
  }

  svg {
    @include svgSize(12px)
  }

  .turned180Deg {
    transform: rotate(180deg);
  }
}


.controlsList {
  @extend %darkBackgroundColorTransparently;

  display: flex;

  padding: 2px;
  transition: transform 0.5s cubic-bezier(0.37, 0.98, 0.63, 0.88);

  position: relative;
  z-index: 2000;

  border: variables.$masterBorderStyle;
  border-width: 1px 1px 1px 0;
  border-radius: 0 5px 5px 0;

  .disabledControl {
    @extend %colorVariablesAttributesDisabled;
  }

  .enabledControl {
    @extend %colorVariablesAttributesEnabled;

    button > span {
      opacity: 0.9;
    }

    svg {
      @extend %dropShadowLightColor;
      @extend %animateOnTurnOn;
    }
  }


  .listItem {
    margin: 5px 3px;

    > button {
      width: 100%;
      padding: 15px 0;


      display: flex;
      justify-content: flex-end;
      align-items: center;

      > svg {
        @include svgSize(58px);
        padding: 0 3px;
      }
    }

    span {
      font-size: 0.7rem;
      letter-spacing: 1px;
      font-weight: 800;
      width: 220px;
      color: white;
      opacity: 0.6;
    }

    &:hover {
      span {
        opacity: 0.8;
        filter: drop-shadow(0 0 3px black);
      }

      svg {
        $animation-time: 0.15s;

        > g > path {
          &:first-child {
            animation: animate-on-hover-keyframe $animation-time cubic-bezier(1, 0, 0, 1) 0s both;
          }

          &:last-of-type {
            animation: animate-on-hover-keyframe $animation-time cubic-bezier(1, 0, 0, 1) 0.1s both;
          }
        }
      }
    }
  }
}

.expandedControlsList {
  transform: translateX(0px);
}

.collapsedControlsList {
  transform: translateX(-266px);
}


//
//
// KEYFRAMES
//

$svg-animation-scale: 1.07;

@keyframes animate-on-hover-keyframe {
  0%, 80%, 100% {
    transform: scale(1);
  }

  50% {
    transform: scale($svg-animation-scale);
  }
}


@keyframes animate-on-turn-on-keyframe {
  0% {
    filter: brightness(7) drop-shadow(0 5px 2px rgba(113, 113, 240, 0.8)) sepia(1);
  }

  30% {
    filter: brightness(6) drop-shadow(0 5px 2px rgba(113, 113, 240, 0.3));
  }

  80% {
    filter: brightness(1.5) drop-shadow(0 5px 2px rgba(113, 113, 240, 0.3));
  }

  100% {
    filter: brightness(1) drop-shadow(0 5px 2px rgba(113, 113, 240, 0.6));
  }
}


[{"C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\404.tsx":"1","C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\api\\socket\\index.ts":"2","C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\api\\v1\\all-jobs-done.ts":"3","C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\api\\v1\\dangerous-clear-all-data.ts":"4","C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\api\\v1\\report-job-done.ts":"5","C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\index.tsx":"6","C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\scoreboard.tsx":"7","C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\start.tsx":"8","C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\_app.tsx":"9"},{"size":123,"mtime":1642291287870,"results":"10","hashOfConfig":"11"},{"size":3862,"mtime":1645521303241,"results":"12","hashOfConfig":"11"},{"size":43,"mtime":1643404008229,"results":"13","hashOfConfig":"11"},{"size":42,"mtime":1644351090302,"results":"14","hashOfConfig":"11"},{"size":44,"mtime":1644351090299,"results":"15","hashOfConfig":"11"},{"size":1933,"mtime":1646146302049,"results":"16","hashOfConfig":"11"},{"size":740,"mtime":1645649177391,"results":"17","hashOfConfig":"11"},{"size":1136,"mtime":1646139845854,"results":"18","hashOfConfig":"11"},{"size":4911,"mtime":1646147564616,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qhg1q4",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\404.tsx",[],"C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\api\\socket\\index.ts",["39"],"import { Server } from 'socket.io'\r\nimport { NextApiRequest, NextApiResponse } from 'next'\r\nimport requestedIP from 'request-ip'\r\n\r\nimport { WEB_SOCKET_EVENTS_TRIGGERS } from '@/features/background/socket-client/socketEventsEntities'\r\nimport {\r\n    IWorkerDTO,\r\n    WorkerKeyType,\r\n    WorkerToSocketDTO\r\n} from '@/features/background/web-workers/webWorkers.types'\r\n\r\nimport { setNewJobDone } from '../../../../src-backend/runtimeData.api'\r\nimport {\r\n    getAllJobsDoneResponse,\r\n    getClientBrowserIDJobsDoneResponse,\r\n    getClientBrowserIDResponse\r\n} from '../../../../src-backend/responsesEntities'\r\nimport { addServerConsoleVerbose } from '../../../../src-backend/features/server-verbose-logs/serverVerboseLogs.api'\r\nimport { AppToSocketDTO } from '@/features/background/socket-client/socket.types'\r\nimport { getSecuredClientBrowserID } from '../../../../src-backend/features/client-browser-id/clientBrowserID.api'\r\nimport { logToFile } from '../../../../src-backend/features/server-verbose-logs/serverVerboseLogsToFile'\r\n\r\n\r\n\r\nconst ioHandler = (req: NextApiRequest, res: NextApiResponse & any) => {\r\n\r\n\r\n    const clientIP: string = requestedIP.getClientIp(req) ?? '0.0.0.0'\r\n    addServerConsoleVerbose(`New IP connected: ${clientIP}`)\r\n\r\n\r\n    if (!(res?.socket?.server?.io) && res?.socket?.server) {\r\n        const io: Server = new Server(res.socket.server)\r\n        io.on('connection', serverSocketClient => {\r\n\r\n            addServerConsoleVerbose(`New IO connection from ${clientIP}`)\r\n\r\n            //\r\n            // WRITE\r\n            //\r\n            serverSocketClient.on(WEB_SOCKET_EVENTS_TRIGGERS.reportJobDone, (request: AppToSocketDTO<WorkerToSocketDTO<IWorkerDTO>>) => {\r\n                const workerKey: WorkerKeyType = request.data.keyNames\r\n                const workerWorkAndCalculationData: IWorkerDTO = request.data.unknownData\r\n\r\n                if (!workerWorkAndCalculationData.lastCalculations) {\r\n                    addServerConsoleVerbose(`The message just came in, but with no calculation data: ${workerKey.workerName} ${new Date(workerWorkAndCalculationData.timestamp)}`, 'log')\r\n                    return void undefined\r\n                }\r\n\r\n\r\n                setNewJobDone({\r\n                    clientBrowserID: getSecuredClientBrowserID(request.userAgent, clientIP),\r\n                    data: {\r\n                        workerName: workerKey.workerName,\r\n                        lastCalculations: workerWorkAndCalculationData.lastCalculations\r\n                    }\r\n\r\n                })\r\n\r\n                serverSocketClient.broadcast.emit(WEB_SOCKET_EVENTS_TRIGGERS.getAllJobsDone, getAllJobsDoneResponse(request, clientIP))\r\n                serverSocketClient.emit(WEB_SOCKET_EVENTS_TRIGGERS.getAllJobsDone, getAllJobsDoneResponse(request, clientIP))\r\n                serverSocketClient.emit(WEB_SOCKET_EVENTS_TRIGGERS.getClientBrowserIDJobsDone, getClientBrowserIDJobsDoneResponse(request, clientIP))\r\n            })\r\n\r\n            serverSocketClient.on(WEB_SOCKET_EVENTS_TRIGGERS.reportNewLog, (request: AppToSocketDTO<string>) => {\r\n                logToFile(`[${clientIP}] ${request.data}`, 'warn')\r\n            })\r\n\r\n\r\n\r\n            //\r\n            // READ\r\n            //\r\n            serverSocketClient.on(WEB_SOCKET_EVENTS_TRIGGERS.getAllJobsDone, (request: AppToSocketDTO<null>) => {\r\n                serverSocketClient.emit(WEB_SOCKET_EVENTS_TRIGGERS.getAllJobsDone, getAllJobsDoneResponse(request, clientIP))\r\n            })\r\n\r\n            serverSocketClient.on(WEB_SOCKET_EVENTS_TRIGGERS.getClientBrowserID, (request: AppToSocketDTO<null>) => {\r\n                serverSocketClient.emit(WEB_SOCKET_EVENTS_TRIGGERS.getClientBrowserID, getClientBrowserIDResponse(request, clientIP))\r\n            })\r\n\r\n\r\n\r\n        })\r\n        res.socket.server.io = io\r\n    }\r\n    res.end()\r\n}\r\n\r\nexport default ioHandler\r\n","C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\api\\v1\\all-jobs-done.ts",[],"C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\api\\v1\\dangerous-clear-all-data.ts",[],"C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\api\\v1\\report-job-done.ts",[],"C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\index.tsx",[],"C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\scoreboard.tsx",[],"C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\start.tsx",[],"C:\\Users\\ms\\Projects\\multi-threading-javascript-tester\\src\\pages\\_app.tsx",[],{"ruleId":"40","severity":1,"message":"41","line":25,"column":64,"nodeType":"42","messageId":"43","endLine":25,"endColumn":67,"suggestions":"44"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["45","46"],{"messageId":"47","fix":"48","desc":"49"},{"messageId":"50","fix":"51","desc":"52"},"suggestUnknown",{"range":"53","text":"54"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"53","text":"55"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[1097,1100],"unknown","never"]